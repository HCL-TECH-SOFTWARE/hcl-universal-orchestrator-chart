# *******************************************************************************
# Licensed Materials - Property of HCL
# (c) Copyright HCL Technologies Ltd. 2024. All Rights Reserved.
# 
# Note to U.S. Government Users Restricted Rights:
# Use, duplication or disclosure restricted by GSA ADP Schedule
# *******************************************************************************
{{ $fullName := include "aipilot.fullName" . }}
{{ $ragname := include "aipilot.rag.name" . }}
{{- $root := . -}}
#####################################################################
#
#####################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $fullName }}-{{ .Values.pilotCore.name }}"
  labels:
    {{- include "aipilot.labels" . | nindent 4 }}
spec:
  replicas: {{ default .Values.replicaCount .Values.pilotCore.replicaCount}}
  selector:
    matchLabels:
{{ include "aipilot.selectorLabels.backend" (list $root .Values.pilotCore) | indent 6}}
  strategy:
    type: {{ default "Recreate" .Values.pilotCore.strategy.type }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels: {{- include "aipilot.selectorLabels.backend" (list $root .Values.pilotCore) | nindent 8 }}
    spec:
{{ include "aipilot.pull.secret" . | indent 6 }}
{{ include "aipilot.serviceAccountName" . | indent 6 }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      initContainers:
        - name: init-wait-for-vector-db
          image: busybox
          env:
            - name: POSTGRES_HOST
              value: {{ .Release.Name }}-pgvector 
          command: ['sh', '-c', 'until nc -z $POSTGRES_HOST:5432; do echo waiting for $POSTGRES_HOST:5432; sleep 30; done;']
        - name: init-create-db
          image: postgres:latest
          volumeMounts:
            - name: https-cert
              mountPath: "/security/postgres/certs"
              readOnly: true
          env:
            - name: POSTGRES_HOST
              value: {{ .Release.Name }}-pgvector
            - name: PGSSLCERT 
              value: /security/postgres/certs/tls.crt
            - name: PGSSLKEY
              value: /security/postgres/certs/tls.key
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.password" . }}
                  key: postgres-password
            - name: POSTGRES_USER
              value: {{ .Values.pgvector.auth.username | default "postgres"  | quote }}
            - name: POSTGRES_ADMIN_USER
              value: "postgres"
          command: ['sh', '-c', 'if ! PGPORT=5432 PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_ADMIN_USER -lqt | cut -d \| -f 1 | grep -qw rasa; then PGPORT=5432 PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_ADMIN_USER -c "CREATE DATABASE rasa WITH OWNER $POSTGRES_USER ENCODING=UTF8 TEMPLATE=template0;"; else echo "Database rasa already exists with this $POSTGRES_PASSWORD and this user $POSTGRES_USER"; fi']  
        - name: inizialize-root-cert
{{- include "aipilot.image" (list $root .Values.pilotCore) | nindent 10 }}
          volumeMounts:
            - name: base-root-ca-cert
              mountPath: "/security/certs/baseRootCACerts/"
            - name: root-ca-cert
              mountPath: "/security/certs/rootCACerts/"
          command: ['sh', '-c', 'cp /security/certs/baseRootCACerts/* /security/certs/rootCACerts/']
      containers:
        - name: "{{ $fullName }}-{{ .Values.pilotCore.name }}"
          {{- include "aipilot.image" (list $root .Values.pilotCore) | nindent 10 }}
          {{- include "aipilot.imagePullPolicy" (list $root .Values.pilotCore) | nindent 10 -}}          
          env:
            - name: PILOT_ACTIONS_URL
              value: "https://{{ $fullName }}-{{ .Values.pilotActions.name }}:{{ default 5055 .Values.pilotActions.port }}"
            - name: PILOT_NLG_URL
              value: "https://{{ $fullName }}-{{ .Values.pilotNlg.name }}:{{ default 5001 .Values.pilotNlg.port }}"
            - name: PILOT_BACKEND_URL
              value: "https://{{ $ragname }}:{{ default 9999 .Values.rag.app.port }}"
            - name: GOOGLE_PROJECT_ID
              value: {{ .Values.channels.googleProjectId | default "NOVALUE" | quote }}
            - name: SLACK_TOKEN
              value: {{ .Values.channels.slackToken | default "NOVALUE" | quote }}
            - name: SLACK_SIGNING_SECRET
              value: {{ .Values.channels.slackSigningSecret | default "NOVALUE" | quote }}
            - name: SLACK_CHANNEL
              value:  {{ .Values.channels.slackChannel | default "NOVALUE" | quote }}
            - name: BOTFRAMEWORK_APP_ID
              value: {{ .Values.channels.botframeworkAppId | default "NOVALUE" | quote }}
            - name: BOTFRAMEWORK_APP_PASSWORD
              value: {{ .Values.channels.botframeworkAppPassword | default "NOVALUE" | quote }}
            - name: GROUPLESS_AUTHENTICATION
              value: {{ .Values.channels.groupless | default "false" | quote }}  
            - name: PASSWORD_TRACKERSTORE
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.password" . }}
                  key: password
            - name: PASSWORD_LOCKSTORE
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.password" . }}
                  key: password
            - name: POSTGRES_DB
              value:  {{ .Release.Name }}-pgvector
            - name: POSTGRES_USER
              value: {{ .Values.pgvector.auth.username | default "postgres"  | quote }}
          envFrom:
            - configMapRef:
                name: "{{ $fullName }}-{{ .Values.pilotCore.name }}-configmap"
            - configMapRef:
                name: {{ .Release.Name }}-aipilot-translation-config
          ports:
            - containerPort: {{ default 5005 .Values.pilotCore.port }}
              name: port-{{ default 5005 .Values.pilotCore.port }}
              protocol: TCP
          volumeMounts:
            {{- if .Values.translation.google.credentials }}
            - name: google-credentials
              subPath: google-credentials.json
              mountPath: /tmp/google-credentials.json
              readOnly: true
            {{- end }}
            - name: endpoints-config
              mountPath: /app/endpoints.yml
              subPath: endpoints.yml
            - name: https-cert
              mountPath: "/var/core-secret"
              readOnly: true
            - name: https-cert
              mountPath: "/security/certs/CAcerts/cacert"
              readOnly: true
            - name: root-ca-cert
              mountPath: "/security/certs/rootCACerts/"
          args: ["/bin/bash", "-c", "if [ ! -f /app/models/latest_model.tar.gz ]; then rasa train --fixed-model-name latest_model.tar.gz; fi; rasa run --cors '*' --ssl-certificate /var/core-secret/tls.crt --ssl-keyfile /var/core-secret/tls.key --enable-api --debug"]
          {{- include "aipilot.resources" .Values.pilotCore | nindent 10 }}
      volumes:
        {{- if .Values.translation.google.credentials }}
        - name: google-credentials
          secret: 
            secretName: {{ .Release.Name }}-aipilot-google-credentials
        {{- end }}
        - name: endpoints-config
          configMap:
            name: {{ $fullName }}-{{ .Values.pilotCore.name }}-configmap
        - name: https-cert
          secret:
            secretName: {{ include "aipilot.cert.name" . }}
            defaultMode: 0640
        - name: base-root-ca-cert
          configMap:
            name: {{ include "aipilot.root.ca.name" . }}
            items:
              - key: ca.crt
                path: cacert.pem
        - name: root-ca-cert
          emptyDir: {}