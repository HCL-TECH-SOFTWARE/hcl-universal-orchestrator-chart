######################################################################
# Licensed Materials Property of HCL*
# (c) Copyright HCL Technologies Ltd. 2020, 2023. All rights reserved.
#
# * Trademark of HCL Technologies Limited
######################################################################

# Global values are values that can be accessed from any chart or subchart by exactly the same name.
# Globals require explicit declaration. You canâ€™t use an existing non-global as if it were a global.

# nameOverride changes the resources names. By default, the release name is used.
nameOverride:
global:
  
  # enableEngine enables and disables the engine deployment. Supported values are true and false.
  enableEngine: true
  # enableConsole enables and disables the Dynamic Workload Console deployment. Supported values are true and false.
  enableConsole: false
  # enableUnoAIPilot  enables and disables the aipilot deployment. Supported values are true and false.
  enableUnoAIPilot: false
  # enable Agentic AI Builder enables and disables the Agentic AI Builder deployment. Supported values are true and false.
  enableAgenticAIBuilder: false
  # debug enables and disables the debugging mode. Supported values are true and false.
  debug: false
  # language specifies the language to be used.
  language: en
  # license indicates whether you accept the license. Supported values are accept and not accepted. Mandatory parameter. 
  license: "not accepted"
  # configPlugins is the ConfigMap containing list of plugin to be installed.
  configPlugins:
  # pluginImageRepository is the name of the repository that contains the image with tags for Automation Hub integrations.
  pluginImageRepository: hclcr.io/wa
  # pluginImageName is the name of the image with tags for Automation Hub integrations. 
  pluginImageName: hcl-workload-automation-plugins:10.2.4.00.20250423
  # extraImages is the list of images with tags containing OCLI and agent for download from Dynamic Workload Console or engine.
  extraImages:
    - registry: hclcr.io/uno
      name: hcl-uno-external-pod:2.1.2.0
    - registry: hclcr.io/wa
      name: hcl-workload-automation-packages:10.2.4.00.20250423
  # customPluginImageName is the custom name of the image with tags for Automation Hub integrations.
  customPluginImageName:
  # serviceAccountName is the name of a custom service account to be used for deployments, for example to deploy HCL Workload Automation.
  serviceAccountName:
  # enablePrometheus enables the Prometheus service. Supported values are true and false.
  enablePrometheus: true
  # use the customLabels, customPodAnnotations, and customEnv sections to add custom information about your environment.
  customLabels:
    - name: environment
      value: prod
  customPodAnnotations:
    env.name: ""
  customEnv:
  #- name: "MY_ENVKEY"
  #  value: "MY_EN_VALUE"
  # 
  # wapassword is the password of the user for which you have installed the engine.
  wapassword:
  # dbadminpassword is the password of the database administrator.
  dbadminpassword:
  # dbpassword is the password for the user that has been granted access to the HCL Universal Orchestrator or Dynamic Workload Console tables on the database server
  dbpassword:
  # Hcl additional imagePullSecret to add to service account
  hclImagePullSecret:
  # cloudCredentials specify the service accounts to access cloud services
  # This is only used in case internal genai service
  cloudCredentials:
    gcp:
      # gcp is the GCP service account key in JSON format. Replace the value with your GCP service account file content encoded in base64.
      serviceFile:
      # gcpProjectId is the GCP project ID. Replace the value with your GCP project ID.
      projectId:
    aws:
      # accessKeyId is the AWS access key ID. Replace the value with your AWS access key ID.
      accessKeyId:
      # secretAccessKey is the AWS secret access key. Replace the value with your AWS secret access key.
      secretAccessKey:
      # region is the AWS region. Replace the value with your AWS region.
      region:
      # roleArn is the AWS role ARN. Used in case of MFA configured account
      roleArn:
    azure:
      # serviceUrl is the Azure service URL of the genai service. Replace the value with your Azure service URL.
      serviceUrl:
      # apiKey is the Azure API key to access the GenAI service. Replace the value with your Azure API key.
      apiKey:
    openai:
      # baseUrl is the base URL of the OpenAI service. Mandatory parameter.
      baseUrl: https://api.openai.com/v1
      # genaiUri is the URI of the OpenAI service for chat completions. Mandatory parameter.
      genaiUri: /chat/completions
      # apiKey is the OpenAI API key to access the GenAI service. Replace the value with your OpenAI API key.
      apiKey:
  dwcconsole:
    # Used to configure an external DWC. Set the name of secret containing the public certificate to verify the JWT token.
    certSecretName:
    # Used to configure an external DWC. Set the name of jwt token issuer
    dwcissuer:
  # For internal use
  waconsole:
uno:
  database:
    # url is the URL of the database. Mandatory parameter.
    url: mongodb://hcl-uno-db-mongodb.db.svc.cluster.local:27017
    # type is the type of the database. Supported value is mongodb.
    type: mongodb
    # databaseName is the name of the database.
    databaseName: uno
    # username is the name of the database user. Mandatory parameter.
    username: 
    # password is the password of the database user. Mandatory parameter.
    password:
    # tls specifies whether TLS is enabled. Supported values are true and false.
    tls: false
    # tlsInsecure specifies whether certificate validation must be skipped. Supported values are true and false.
    tlsInsecure: false
  kafka:
    # url is the URL of the event streaming platform. Mandatory parameter.
    url: hcl-uno-kafka-0.kafka-headless.kafka.svc.cluster.local:9092
    # prefix of topic name
    prefix:
    # username is the name of the kafka user. Mandatory parameter.
    username: 
    # password is the password of the kafka user. Mandatory parameter.
    password:
    # tls specifies whether TLS is enabled. Supported values are true and false.
    tls: false
    # Kafka sasl mechanism as kafka client configuration provides.
    saslMechanism:
    # Kafka jass config as kafka client configuration provides.
    jaasConfig:
    # Kafka security protocol as kafka client configuration provides.
    securityProtocol:
    # tlsInsecure specifies whether certificate validation must be skipped. Supported values are true and false.
    tlsInsecure: false
    # kerberos service name
    kerberosServiceName:
    #Oauth login call back handler class
    oauthLoginCallbackHandlerClass:
    #Oauth token endpoint url
    oauthTokenEndpointUrl:
    # topicReplicas is the number of replicas for the topic.
    topicReplicas: 1
  config:
    license:
      # Url of MHS license server
      licenseServerUrl: https://api.hcltechsw.com
      # Key of Deployment on MHS license server
      licenseServerKey:
      proxy:
        # optional proxy configuration to access the GenAI service.
        hostname:
        port:
        username:
        password:
    audit:
        # max number of days to keep audit logs
        retentionDays: P400D
    registry:
      # name is the name of your registry.
      name:  hclcr.io/uno
      # pullPolicy defines when data is pulled from your event streaming platform. Supported values are Always, Never, IfNotPresent.
      pullPolicy: Always
      # tag is the tag of the image. The default value is latest.
      tag: 2.1.2.0
    orchestrator:
      # the maximum number of nested workflow in the plan. The subflow jobs exceeding this value will end in FAIL
      maxNestingLevel: 50
      # the time windows, in seconds, that permits the user to cancel the completion of a human task
      humanTaskCancelWindowSeconds: 20
      # Custom template in HTML format for the email sent as notifications when a human task is created. Optional.
      humanTaskMailTaskCreatedTemplate: #<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><title>New task</title></html>
      # Custom template in HTML format for the email sent as notifications when a human task is assigned/unassigned. Optional.
      humanTaskMailTaskAssignedTemplate: #<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><title>Assigned task</title></html>
    planning:
      # max number of days to generate not active instance
      notActiveWindowMax: P9DT0H
      # min number of days to generate not active instance
      notActiveWindowMin: P7DT0H
      # Frequency to activate not active instances
      activeWindowExtension: PT5M
      # How long is the windows of active instance (how long the plan is)
      activeWindow: PT24H
      # How long is the windows of plan in the past
      daysRetentionPlan: P7DT0H
      # How long is the windows of plan in the past for failed jobs
      daysRetentionFailPlan: P30DT0H
      # Frequency to remove the past failed jobs
      frequencyFailJobCleanUp: PT1H
    console:
      # hostname is the hostname of the Dynamic Workload Console.
      hostname:
      # port is the port of the Dynamic Workload Console.
      port:
      # enableLogout specifies whether the new Console logout is enabled. Supported values are true and false.
      enableLogout: false
      # defines the minutes after which the user is considered inactive and gets logged out from the UI. Supported values are integers.
      sessionTimeoutMinutes: 30
    genai:
      # Enables the AI Pilot generative AI features. Supported values are true and false.
      # By enabling this feature with internal as false, you agree that AI Agent and AI Pilot prompts will be sent to HCL Software.
      # analytics and to improve the product in the future.
      # We can collect statistical data for analytics and licensing purposes, but we won't retain the prompt content.
      # All information will be handled according to HCL Software privacy policy.
      enabled: false
      # the URL of the GenAI service.
      serviceUrl: https://genai.services.hcluno.cloud
      # betaKey is the custom key to access the GenAI service provided by HCL Software for beta testing.
      betaKey:
      # optional proxy configuration to access the GenAI service.
      proxy:
        # The hostname of the proxy server.
        hostname:
        # The port of the proxy server.
        port:
        # The username to authenticate to the proxy server.
        username:
        # The password to authenticate to the proxy server.
        password:
        # max number of user prompts to be sent to LLM for context.
      maxUserPrompts:
      # max number of actions triggered in a conversation.
      maxActionPerConversation:
      # max number of conversation that can happen without a user prompt.
      maxUnattendedActions:
      # Enables the GenAI service to be deployed in the same cluster in order to your own accounts for LLM services. Supported values are true and false.
      internal: false
      # Below information are only used if the genai service is internal deployment.
      # Gemini model used for AI Pilot. This is also the default model used for AI Agents. It must be a Gemini model.
      defaultVertexAiModel: gemini-2.0-flash
      # timeout is the timeout for the GenAI service requests.
      timeout:
      # These models may take upto 5 minutes to reflect in the other services.
      agentModels:
        # Model names that work with GenAI service for AI Agents from vertex-ai
        vertexAiModels:
        # Model names that work with GenAI service for AI Agents from open ai
        openAiModels:
        # Model names that work with GenAI service for AI Agents from bedrock
        bedrockModels:
    engine:
      # justificationsEnabled specifies whether the justification feature is enabled. Supported values are true and false.
      justificationEnabled: false
      # justificationCategoryRequired specifies whether the justification category is mandatory. Supported values are true and false.
      justificationCategoryRequired: false
      # justificationTicketNumberRequired specifies whether the justification ticket number is mandatory. Supported values are true and false.
      justificationTicketNumberRequired: false
      # justificationDescriptionRequired specifies whether the justification description is mandatory. Supported values are true and false.
      justificationDescriptionRequired: false
      mail:
      enabled: false
      smtp:
        # host is the SMTP host to send emails.
        host: smtp.example.com
        # port is the SMTP port to send emails.
        port: 587
        # startTlsEnabled specifies whether STARTTLS is enabled. Supported values are true and false.
        startTlsEnabled: true
        # sslCheckServerIdentity specifies whether the server identity is checked. Supported values are true and false.
        sslCheckServerIdentity: true
        # sslTrust specifies which servers are trusted.
        sslTrust: #host.trusted.com
        # connectionTimeoutMs is the timeout in milliseconds for connecting to the SMTP server.
        connectionTimeoutMs: 30000
      # from is the email address from which the emails are sent. Mandatory if mail is enabled.
      # optionally, specify the name of the sender in the format "Sender name example<from@mail.com>"
      from: #from@mail.com
      # credentialsSecretName is the name of the Kubernetes secret that contains the SMTP credentials. If smtp is enabled, this is a mandatory parameter.
      # The secret must contain the following keys: USERNAME and PASSWORD.
      credentialsSecretName: uno-smtp-credentials
    endpoint:
      # endpoint where the console is exposed.
      console: #https://console.example.com
      # endpoint where the gateway is exposed.
      gateway: #https://gateway.example.com
    encryption:
      # The password or key to encrypt data, such as passwords, agent database, and kafka messages.
      key:
    plugins:
      #If the size of the plug-in that needs to be installed exceeds 10 MB, specify a value higher than the plug-in size.
      maxSize:
    eventmanager:
      plugins:
        gcp:
          # baseServicePath is the base path of the Google Cloud Platform (GCP) service.
          baseServicePath:
    certificates:
      # useCustomizedCert specifies if you use custom certificates or certificates generated by cert-manager. Supported values are true and false. If you set it to false, certificates are defined by the deployment process. If you set it to true, provide the required certificates and customize the parameters listed below.
      useCustomizedCert: false
      #Ignore SSL hostname verfication. if the certificates of microservices are not generated with the corrent hostname enable this option
      disableHostnameVerification: false
      # customIssuer is the name of the issuer. This parameter applies if you set useCustomizedCert to false. If not specified, a self-signed issuer is created.
      customIssuer:
      # customIngressIssuer is the optional name of the certificate issuer that overrides internal issuer with a specific one to be used only for ingress.
      customIngressIssuer:
      # caPairSecretName is the name of the pair secret. This parameter applies if you set useCustomizedCert to true.
      caPairSecretName: ca-key-pair
      # certSecretName is the name of the secret. This parameter applies if you set useCustomizedCert to true.
      certSecretName: uno-certificate
      # certExtAgtSecretName is the name of the secret of the external agent. This parameter applies if you set useCustomizedCert to true.
      certExtAgtSecretName: uno-certificate-ext-agt
      # caDuration is the duration of the ca certificates before they are set to expire. This parameter applies if you set useCustomizedCert to false.
      caDuration: 26298h
      # caRenewBefore is the time before the ca certificate expires when the certificate manager service begins attempts to renew the certificate. This parameter applies if you set useCustomizedCert to false.
      caRenewBefore: 22332h
      # duration is the duration of the certificates before they are set to expire. This parameter applies if you set useCustomizedCert to true.
      duration: 2160h
      # renewBefore is the time before the certificate expires when the certificate manager service begins attempts to renew the certificate. This parameter applies if you set useCustomizedCert to true.
      renewBefore: 360h
      # organization is the organization label within the certificates. This parameter applies if you set useCustomizedCert to true.
      organization: hcl
      # additionalCASecrets contains additional secrets, for example to trust MongoDb or Kafka certificates. This parameter applies if you set useCustomizedCert to true.
      additionalCASecrets: 
      #  - secretname1
    apiKey:
      # lifespanWarningDays specifies how many days before API Key expiration you are notified about it.
      lifespanWarningDays: 5
      # apikeyPersonalExpirationDuration is the amount of time on or after which the Personal API Keys expire. It is calculated starting from API Key creation.
      apikeyPersonalExpirationDuration: P365D
      # apikeyServiceExpirationDuration is the amount of time on or after which the Service API Keys expire. It is calculated starting from API Key creation.
      apikeyServiceExpirationDuration: P365D
      # groupsCacheExpirationDuration is the amount of time on or after which users must login again to the authentication provider to use Personal API Keys.
      groupsCacheExpirationDuration: P30D
      # cleanupFrequencyForPending indicates how often the IAA service checks in the database for API Keys whose token has not been created after the cleanupFrequencyForPending timeout has expired.
      cleanupFrequencyForPending: PT1M
      # cleanupTimeoutForPending indicates the amount of time after which API Keys must be deleted if the related token has not been created. The maximum supported value is 1 day.
      cleanupTimeoutForPending: PT15M # Maximum allowed value is 1d

    jwt:
      # jwtSecretName is the name of your custom Kubernetes secret used to sign JWTs.
      jwtSecretName:
      # internalExpirationDuration is the amount of time on or after which the internal JWT expires.
      internalExpirationDuration: PT10M

    tracing:
      # enabled specifies whether tracing is enabled. Supported value are true and false.
      enabled: true
      # otelEndpoint is the endpoint to which OpenTelemetry traces are sent.
      otelEndpoint: http://simplest-collector.default:4317/api/traces
      # traceAll specifies whether all events are traced. Supported value are true and false. If you set it to true, also internal calls are traced.
      traceAll: false

  authentication:
    # adminName is the name of the admin user. The default security policy will be created or updated for that user.
    adminName: "wauser"
    #apiHostname specifies the API gateway hostname and is used only when ingress.enabled is set to false.
    apiHostname: gateway
    oidc:
      # connectionTimeout is the amount of time on or after which connection to OIDC provider goes in timeout.
      connectionTimeout: PT1M
      # enabled specifies whether authentication through OpenID Connect (OIDC) server is enabled.
      # If enabled is set to false, the other properties in this section are ignored.
      enabled: false
      # useToManageApiKeys specifies whether the OpenID Connect (OIDC) server must be used in place of the Dynamic Workload Console to manage API keys (for example, when authentication information expires).
      # Supported values are true and false.
      useToManageApiKeys: false
      # server is the base URL of the OpenID Connect (OIDC) server. This parameter applies when enabled is set to true.
      server: https://unokeycloak.k8s.uat.uno/realms/uno
      # clientId is the client-id of the application in the OpenID Connect (OIDC) server. This parameter applies when enabled is set to true.
      clientId: uno-service
      # credentialSecret is the client secret which is used for a client_secret_basic authentication with OpenID Connect (OIDC) server. This parameter applies when enabled is set to true.
      credentialSecret: put_oidc_secret_here
      # encryptTokensInCookie enables the encryption of the tokens before being stored in the cookies. This parameter applies when enabled is set to true.
      encryptTokensInCookie: true
      # splitTokensInCookie set false to keep all OIDC-related tokens (ID, access and refresh) in a single session cookie. Set true to minimize session cookie size. This parameter applies when enabled is set to true.
      splitTokensInCookie: true
      # tlsVerification enables both certificate validation and hostname verification. You can use the config.certificates.additionalCASecrets parameter to add a secret for the OpenID Connect (OIDC) server CA. This parameter only applies when enabled is set to true.
      # Supported values are:
      # "none"                   : All certificates are trusted and hostname verification is disabled
      # "required"               : Certificates are validated and hostname verification is enabled
      # "certificate-validation" : Certificates are validated and hostname verification is disabled
      tlsVerification: "required"
      # The path to the claim in the JWT token which contains the roles to be mapped to Quarkus security roles
      groupClaimPath: ""
      # The name of the claim in the JWT token whose value will be used as the principal name
      principalClaim: ""
      # The list of scopes that must be granted to the access token for the authentication to succeed
      authenticationScope: ""
      # The path to the claim in the JWT token that contains the group names for the user
      jwtGroupClaimPath: ""

  # bulkhead defines the policy to be used on the gateway endpoint for avoiding bulk requests and block DDOS attacks against these contexts.
  bulkhead:
    request:
      # maxValue defines the maximum number of concurrent calls to an instance. The value must be greater than 0.
      maxValue: 12
      # waitingTaskQueue defines the maximum number of calls which can be kept waiting in each queue. The value must be greater than 0.
      waitingTaskQueue: 12
  routes:
    # enabled specifies whether a Openshift route is enabled to route traffic from external sources to the applications in the cluster. Supported values are true and false.
    enabled: true
    #  specifies whether a Openshift route ssl termination . Supported values are passthrough and reencrypt.
    termination:
  ingress:
    # enabled specifies whether an ingress is enabled to route traffic from external sources to the applications in the cluster. Supported values are true and false.
    enabled: true
    # ingressClassName is a unique identifier for the ingress controller.
    ingressClassName: nginx
    # baseDomainName is the name of the base domain for using the ingress controller. This parameter applies if you set enabled to true.
    baseDomainName: .k8s.uat.uno
    annotations:
      # For more information, see the ingress controller documentation.
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #    secretName is the name of the secret.
    #  - secretName: chart-example-tls
    #    hosts specifies the names of the hosts to which the secret applies.
    #    hosts:
    #      - chart-example.local


  deployment:
    global:
      podDisruptionBudget:
        # enabled specifies whether a PodDisruptionBudget is enabled. Supported values are true and false.
        enabled: false
        # maxUnavailable is the maximum number, or percentage, of unavailable pods during the disruption.
        maxUnavailable: "33%"
      # minTargetReplicas is the minimum number of target replicas to be deployed for each microservice.
      minTargetReplicas: 1
      # maxTargetReplicas is the maximum number of target replicas to be deployed for each microservice.
      maxTargetReplicas: 3
      # traceLevel specifes the trace detail level for trace.log. Supported values are ALL,FINE,INFO.
      traceLevel: "INFO"
      autoscaler:
        # cpuAverageUtilization specifies the average usage of CPU which starts the autoscaler.
        cpuAverageUtilization: 200
      resources:
        limits:
          # cpu is the maximum amount of cpu services can use.
          cpu: "2"
          # memory is the maximum amount of memory services can use.
          memory: 1024Mi
        requests:
          # cpu is the minimum amount of cpu services require to run.
          cpu: "0.6"
          # memory is the minimum amount of memory services require to run.
          memory: 512Mi
    # The properties listed below apply to single microservices. You can use them to override the global settings defined above for one or more microservices.
    console:
      # ingressPrefix is the prefix of the name of the endpoint of the console microservice.
      ingressPrefix: "console"
      #minTargetReplicas: 1
    agentmanager:
      # ingressPrefix is the prefix of the name of the endpoint of the agentmanager microservice.
      ingressPrefix: agentmanager
      #minTargetReplicas: 1
    gateway:
      # ingressPrefix is the prefix of the name of the endpoint of the gateway microservice.
      ingressPrefix: "gateway"
      #minTargetReplicas: 1
    eventmanager:
      #minTargetReplicas: 1
    audit:
      #minTargetReplicas: 1
    toolbox:
      #minTargetReplicas: 1
    iaa:
      #minTargetReplicas: 1
    executor:
      #minTargetReplicas: 1
      enableExecutorSandbox: "false"
    orchestrator:
      #minTargetReplicas: 1
      resources:
        limits:
          cpu: "2"
          memory: 1024Mi
        requests:
          cpu: "0.6"
          memory: 1024Mi
    scheduler:
      #minTargetReplicas: 1
    storage:
      #minTargetReplicas: 1
    timer:
      #minTargetReplicas: 1
    notification:
      #minTargetReplicas: 1
 agenticAIBuilder:
    telemetry:
      enableTelemetry: "false"
      inferenceEndpoint : ""
      telemetryBaseUrl : ""
      telemetryServiceName: ""
      telemetryExportIntervalMillis: "60000"
    
    common:
      # By default the values are configured to work with the default Apisix deployed by the of bitnami/apisix.
      apisix:
        # existingSecret is the name of the Kubernetes secret that contains the API keys for APISIX.
        existingSecret: "apisix-api-keys"
        # existingSecretAdminTokenKey is the key in the Kubernetes secret that contains the admin API key for APISIX.
        existingSecretAdminTokenKey : "admin-key"
        # existingSecretViewerTokenKey is the key in the Kubernetes secret that contains the viewer API key for APISIX.
        existingSecretViewerTokenKey : "viewer-key"
        # apiTokenAdmin is the admin API token for APISIX. If you set existingSecret, this parameter is ignored.
        apiTokenAdmin: ""
        # The hostname of the APISIX control plane.
        serviceName: "apisix-control-plane"
        # The admin port of the APISIX control plane.
        adminPort: "9180"
        # The certificate of the APISIX control plane.
        certificateSecret: "apisix-control-plane-tls"
        # The ingressClassName of your APISIX ingress controller. By default, it is set to default value of the official and bitnami chart of apisix
        ingressClassName: "apisix"
        #  The https port of the APISIX gateway to access routes.
        httpsGatewayPort: "443"
        # extraTLSHosts is a list of additional hosts for which the TLS certificate is valid.
        # If you expose the Gateway through an ingress controller, you must add the hostname of the ingress controller to this list.
        extraTLSHosts:

      # By default the values are configured to work with the default Valkey deployed by the bitnami/valkey chart.
      valkey:
        # valkeyPasswordSecret is the name of the Kubernetes secret that contains the Valkey password.
        valkeyPasswordSecret : "valkey-password-secret"
        # valkeyPasswordSecretKey is the key in the Kubernetes secret that contains the Valkey password.
        valkeyPasswordSecretKey: "password"
        # valkeyPassword is the Valkey password. If you set valkeyPasswordSecret, this parameter is ignored.
        valkeyPassword : ""
        # valkeyHost is the hostname of the Valkey service.
        valkeyHost: "valkey-primary"
        # valkeyPort is the port of the Valkey service.
        valkeyPort: "6379"
        # valkeyDb is the database number of the Valkey service.
        valkeyDb: "0"

      # By default the values are configured to work with the default pgvector deployed by UNOAIPilot.
      # If you want to use a different PostgreSQL service, you can override the values below
      # to point to your PostgreSQL service.
      postgres: 
        # postgresUser is the name of the PostgreSQL user used by the agentic ai builder microservices.
        postgresUser: agenticbuilder
        # postgresPort is the port of the PostgreSQL service.
        postgresPort : "5432"
        # postgresPasswordSecret is the name of the Kubernetes secret that contains the PostgreSQL password.
        postgresPassword: "{{ .Release.Name }}-postgres-password-secret"
        # postgresDB is the name of the PostgreSQL database used by the agentic ai builder microservices.
        postgresDB: "agenticbuilder"
        # postgresService is the name of the PostgreSQL service.
        postgresService: "{{ .Release.Name }}-pgvector"
        # postgresCertificateSecret is the name of the Kubernetes secret that contains the PostgreSQL certificate.
        postgresCertificateSecret: "{{ .Release.Name }}-postgres-certificates-secret"
      
        # Only to let the init container create the database "$postgresDB" and the "$postgresUser" if it does not exist
        adminUser: "postgres"
        initDatabases: true
    
    authorization:
        # The authorization configuration for the Agentic AI Builder microservices. to authenticate with the UNO instance
        # Do not change the values below unless you know what you are doing.
        certs:
          HCL_AUTHORIZATION_HTTPS___WAJWT_API: "{{  .unofullname }}-jwt-key"
          HCL_AUTHORIZATION_HTTPS___WAJWT_APIGATEWAY:  "{{  .unofullname }}-jwt-key"
          HCL_AUTHORIZATION_HTTPS___WAJWT_MCP:  "{{  .unofullname }}-jwt-key"
        # oidcServerURL is the URL of the OpenID Connect (OIDC) server. Mandatory parameter.
        oidcServerURL: "https://uno-keycloak-ssl:8843"

    certificates:
      # useCustomizedCert specifies if you use custom certificates or certificates generated by cert-manager. Supported values are true and false. If you set it to false, certificates are defined by the deployment process. If you set it to true, provide the required certificates and customize the parameters listed below. 
      useCustomizedCert: false 
      # To enable if you want to use a custom issuer
      customIssuer: false
      # caPairSecretName is the name of the pair secret. This parameter applies if you set useCustomizedCert to false.
      caPairSecretName: ca-key-pair
      # certSecretName is the name of the secret. This parameter applies if you set useCustomizedCert to false.
      certSecretName : "uno-agentic-ai-builder-certificate"
      # duration is the duration of the certificates before they are set to expire. This parameter applies if you set useCustomizedCert to false.
      duration: 2160h
      # renewBefore is the time before the certificate expires when the certificate manager service begins attempts to renew the certificate. This parameter applies if you set useCustomizedCert to false.
      renewBefore: 360h
      # If you are using a custom issuer, specify the issuer name
      issuerName: ""
      # organization is the organization label within the certificates. This parameter applies if you set useCustomizedCert to false.
      organization: hcl

      additionalCASecrets:
       - uno-certificate

    serviceAccount:
      # serviceAccount is the name of the service account used by the Agentic AI Builder microservices.
      # By default will be used the global serviceAccountName.
      name: ""

    credentialManager:
      # Name of the core service
      name: cm
      #Image name
      imageName: hcl-agentic-cm
      # The port on which the core service will be exposed
      port: 8000
      # The number of replicas for the core service
      replicaCount: 1
      # Resource Configuration
      resources:
        limits:
          cpu: 1000m
          memory: 2500Mi
        requests:
          cpu: 300m
          memory: 500Mi

    ams:
      name: ams
      #Image name
      imageName: hcl-agentic-ams
      # The port on which the core service will be exposed
      port: 8080
      # The number of replicas for the core service
      replicaCount: 1
      # Resource Configuration
      resources:
        limits:
          cpu: 1000m
          memory: 2500Mi
        requests:
          cpu: 300m
          memory: 500Mi

    runner:
      name: runner
      #Image name
      imageName: hcl-agentic-runner
      # The port on which the core service will be exposed
      port: 8080
      # The number of replicas for the core service
      replicaCount: 2
      hpa:
        enabled: false
        minReplicas: 1
        maxReplicas: 10
      # Resource Configuration
      config:
        unoMCPBaseURL : ""
        maxAgents: 5
      resources:
        limits:
          cpu: 1000m
          memory: 2500Mi
        requests:
          cpu: 300m
          memory: 500Mi

    image:
      # The registry where the image is hosted
      repository: wa-registry.prod.hclpnp.com/maestro-dev
      # The tag of the images
      tag: 2.1.2.0
      # The Pull Policy for the images
      imagePullPolicy: Always

    additionalPullSecret : ""
  hclaipilot:  
    image:
      repository: hclcr.io/uno
      tag: 2.1.2.0

    # Channels Configuration 
    # The following configuration is used to enable the AIPilot for the channels. For each channel, you need to provide the required configuration.
    channels:
      ### Slack Configuration ###
      slackToken: ""
      slackSigningSecret: ""
      slackChannel: ""

      ### Google Chat Configuration ###
      googleProjectId: ""

      ### Microsoft Teams Configuration ###
      botframeworkAppId: ""
      botframeworkAppPassword: ""

      ### To disable group check of the OIDC provider. ###
      # To be enabled when the OIDC provider is not setup with the same LDAP/User provider of the channels and is not possible to add user to it manually
      # so the email of the configured channels are manually added in the ACL
      groupless: "false"
    

    translation:
      # Configuration for the Azure Translation API
      azure:
        # The Subscription Key for the Azure Translation API
        subscriptionKey: ""
        # The Region for the Azure Translation API
        region: ""
        # The Translation API Endpoint
        endpoint: ""

      # Configuration for the Google Translation API
      google:
        # The Credentials json file for the Google Translation API encoded in base64
        credentials: ""
    
    #Core Service Deployment Configuration
    pilotCore:
      # The number of replicas for the core service
      replicaCount: 1
      resources:
        limits:
          cpu: "1"
          memory: 2500Mi
        requests:
          cpu: "0.5"
          memory: 2000Mi
    
    #NLG Service Deployment Configuration
    pilotNlg:
      # The number of replicas for the nlg service
      replicaCount: 1
      resources:
        limits:
          cpu: "0.3"
          memory: 500Mi
        requests:
          cpu: "0.1"
          memory: 300Mi
    
    #Actions Service Deployment Configuration
    pilotActions:
      # The number of replicas for the actions service
      replicaCount: 1
      resources:
        limits:
          cpu: "0.3"
          memory: 300Mi
        requests:
          cpu: "0.1"
          memory: 200Mi

    certificates:
      # useCustomizedCert specifies if you use custom certificates or certificates generated by cert-manager. Supported values are true and false. If you set it to false, certificates are defined by the deployment process. If you set it to true, provide the required certificates and customize the parameters listed below. 
      useCustomizedCert: false
      # customIssuer is the name of the issuer. This parameter applies if you set useCustomizedCert to false. If not specified, a self-signed issuer is created.
      customIssuer:
      # caPairSecretName is the name of the pair secret. This parameter applies if you set useCustomizedCert to false.
      caPairSecretName: ca-key-pair
      # certSecretName is the name of the secret. This parameter applies if you set useCustomizedCert to false.
      certSecretName: uno-aipilot-certificate
      # duration is the duration of the certificates before they are set to expire. This parameter applies if you set useCustomizedCert to false.
      duration: 2160h
      # renewBefore is the time before the certificate expires when the certificate manager service begins attempts to renew the certificate. This parameter applies if you set useCustomizedCert to false.
      renewBefore: 360h
      # organization is the organization label within the certificates. This parameter applies if you set useCustomizedCert to false.
      organization: hcl

    rag:
      certificates:
        # useCustomizedCert specifies if you use custom certificates or certificates generated by cert-manager. Supported values are true and false. If you set it to false, certificates are defined by the deployment process. If you set it to true, provide the required certificates and customize the parameters listed below. 
        useCustomizedCert: false
        # customIssuer is the name of the issuer. This parameter applies if you set useCustomizedCert to false. If not specified, a self-signed issuer is created.
        customIssuer:
        # caPairSecretName is the name of the pair secret. This parameter applies if you set useCustomizedCert to false.
        # Must be the same as the value of caPairSecretName in the other certificates section. Change only if you want to use a different CA to sign the certificates
        caPairSecretName: ca-key-pair
        # certSecretName is the name of the secret. This parameter applies if you set useCustomizedCert to false. 
        # Change the value if you want to use a different certificates, by default it will be created by the core service signed with the CA of caPairSecretName
        certSecretName: uno-aipilot-rag-certificate
        # duration is the duration of the certificates before they are set to expire. This parameter applies if you set useCustomizedCert to false.
        duration: 2160h
        # renewBefore is the time before the certificate expires when the certificate manager service begins attempts to renew the certificate. This parameter applies if you set useCustomizedCert to false.
        renewBefore: 360h
        # organization is the organization label within the certificates. This parameter applies if you set useCustomizedCert to false.
        organization: hcl
      
      resources:
        limits:
          cpu: "0.8"  # CPU limit
          memory: "1024Mi"  # Memory limit
        requests:
          cpu: "0.2"  # CPU request
          memory: "256Mi"  # Memory request

      hpa:
        minReplicas: 1  # Minimum number of replicas
        maxReplicas: 2  # Maximum number of replicas
      
      container:
        registry: hclcr.io/uno # Image name
        tag: 2.1.2.0  # Image tag
    
      authorization:
        # Is the URL of the OpenID Connect (OIDC) server.
        oidcServerURL: "https://uno-keycloak-ssl:8843"

    pgvector:
      # Image Configuration
      image:
        # The registry where the pgvector image is hosted
        registry: hclcr.io/uno
        # The repository name for the pgvector image
        repository: pgvector
        # The tag/version of the pgvector image
        tag: 17
        # The secret used to pull the image from the registry
        pullSecrets:
          - '{{ include "aipilot.pgvector.pull.secret" $ }}'
      auth:
        # The existing secret containing the PostgreSQL password Change, the value if you want to use a different secret
        existingSecret: '{{ include "aipilot.pgvector.credentials.secret.name" $ }}'
        # The username for PostgreSQL authentication
        username: "aipilot"
        # The database name to be used for the rag service
        database: "vector_db"
      
      tls:
        # Enable TLS for secure connections
        enabled: true
        # The secret containing TLS certificates, Change the value if you want to use custom certificates
        # By default it will be created by default by the core service
        certificatesSecret: '{{ include "aipilot.pgvector.cert.secret.name" $ }}'
        # The filename Inside the secret for the TLS certificate
        certFilename: tls.crt
         # The filename  Inside the secret for the TLS certificate key
        certKeyFilename: tls.key
        # The filename  Inside the secret for the CA certificate
        certCAFilename: ca.crt
        # The secret name for the CA to be used to sign the certificatesSecret, 
        # Must be the same as the value of caPairSecretName in the certificates section Change if you want to use a custom CA to sign the certificates
        caPairSecretName: ca-key-pair
        # Must be equal  to the common name(CN) of the certificate used by pilot for the connection to the database
        pilotCertCommonName : "aipilot"
        # Must be equal of the common name(CN) of the certificate used by rag for the connection to the database
        ragCertCommonName: "rag"
      
waconsole:
  # runAsUser specfies the user to be used for running the Dynamic Workload Console.
  runAsUser: 999
  # fsGroupId is the secondary group ID of the user.
  fsGroupId: 999
  # supplementalGroupId is the supplemental group ID of the user.
  supplementalGroupId:
  # enable page to download extra packages from DWC
  enableNginxServer: true
  console:
    # certSecretName is the name of the secret to store customized SSL certificates.
    certSecretName: waconsole-cert-secret
    # containerDebug specifies that the container is executed in debug mode.
    containerDebug: false
    # enableSSO specifies whether Single Sign On (SSO) is enabled. It's enable by default always false
    enableSSO: false
    # adminGroup is the name of the administrative group.
    adminGroup:
    # engineHostName specifies the hostname of the engine to connect to. Mandatory parameter.
    engineHostName:
    # enginePort specifies the port of the engine to connect to.
    enginePort: 8443
    db:
      # add as supported DB ORACLE MSSQL DB2
      # type is the preferred remote database server type.
      type: POSTGRESQL
      # adminUser is the database administrator who accesses the Console tables on the database server.
      adminUser: postgres
      # hostname is the hostname or the IP address of the database server. Mandatory parameter.
      hostname: postgreshost
      # alternateHostName is the hostname or the IP address of the alternate database server.
      alternateHostName:
      # name is the database name.
      name: DWC
      # port is the port of the database server.
      port: 5432
      #alternatePort is the alternative port of the database server.
      alternatePort:
      # server is the name of the database server. Mandatory parameter.
      server:
      # sslConnection specifies whether the connection to the database is in SSL mode.
      sslConnection: false
      # Only for mongodb disable TLS hostname verification 
      invalidHostnameAllowed: false
      # Only for documentdb specify the retryWrites option. Supported values are true and false.
      retryWrites: "false"
      # Only for documentdb specify the read preference. Supported values are primary, primaryPreferred, secondary, secondaryPreferred, nearest.
      readPreference: "secondaryPreferred"
      # Only for mongodb optially specify the admin database  
      authDb:
      # tsName is the name of the DATA table space.
      tsName: null
      # tsPath is the path of the DATA table space.
      tsPath: null
      # tsTempName is the name of the TEMP table space.
      tsTempName: null
      # tssbspace is the name of the SB table space.
      tssbspace: null
     
      # usepartitioning specifies whether partitioning is used.
      usepartitioning: true
      # user is the database user who accesses the Console tables on the database server.
      user: db2inst1
      # skipCheck specifies whether a database integrity check should be performed.
      skipCheck: false
    routes:
      # enabled specifies whether the ingress controller rules are enabled.
      enabled: true
    ingress:
      # hostname is the virtual hostname defined in the DNS used to reach the Console.
      hostname:
      # className is the name of the class.
      className:
      # secretName is the name fot he secret to store the ingress data.
      secretName: wa-console-ingress-secret
    # exposeServiceType specifies the network enablement configuration implemented. Supported values are Load balancer or Ingress.
    exposeServiceType: Ingress
    # exposeServiceAnnotation specifies the annotations of either the resource of the service or the resource of the ingress, customized in accordance with the cloud provider.
    exposeServiceAnnotation:
      #cert-manager.io/issuer: wa-ca-issuer
      #service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
      #service.beta.kubernetes.io/aws-load-balancer-type: "clb"
      #service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      #service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      #networking.gke.io/load-balancer-type: "Internal"
    # networkpolicyEgress controls network traffic and how a component pod is allowed to communicate with other pods. If empty, no egress policy is defined.
    networkpolicyEgress:
    # Allows all  Egress to mdm.
    #  - name: to-mdm
    #    egress:
    #    - to:
    #      - podSelector:
    #          matchLabels:
    #            app.kubernetes.io/name: waserver
    #
    #  - name: dns
    #    egress:
    #    - to:
    #        - namespaceSelector:
    #            matchLabels:
    #              name: kube-system
    #    - ports:
    #        - port: 53
    #          protocol: UDP
    #        - port: 53
    #          protocol: TCP
    # nodeAffinityRequired is a set of rules that determines on which nodes a console can be deployed using custom labels on nodes and label selectors specified in pods.
    nodeAffinityRequired:
    livenessProbe:
      # initialDelaySeconds is the number of seconds after which the liveness probe starts checking if the server is running.
      initialDelaySeconds: 100
    # pwdSecretName is the name of the secret to store the password.
    pwdSecretName: wa-pwd-secret
    # useCustomizedCert specifies whether customized SSL certificates are used to connect to the Dynamic Workload Console.
    useCustomizedCert: false
    # tz sets the timezone (TZ) operating system environment variable.
    tz:
    # libConfigName is the name of the ConfigMap to store all custom Liberty configurations.
    libConfigName: null
    # Enable the following row to configure DWC with oidc provider
    #libConfigName: hcl-uno-oidc-config
    disableAccessControl:
    oidc:
      clientId: uno-service
      clientSecret: put_oidc_secret_here
      httpsRequired: true
      userIdentifier: preferred_username
      signatureAlgorithm: RS256
      scope: openid
      authFilterRef: restFilterOpenID
      inboundPropagation: supported
      groupIdentifier: groups
      groupNameAttribute: groups
      redirectToRPHostAndPort: https://dwc_ingress_hostname
      discoveryEndpointUrl: https://<oidc ingress hostname>/realms/uno/.well-known/openid-configuration
  image:
    # pullPolicy specifies the image pull policy. Supported values are Always, Never, IfNotPresent.
    pullPolicy: Always
    # repository is the Dynamic Workload Console image repository. Mandatory parameter.
    repository: hclcr.io/wa/hcl-workload-automation-console
    # tag is the Dynamic Workload Console image tag. Mandatory parameter.
    tag: 10.2.4.00.20250423
  persistence:
    dataPVC:
      # name is the prefix for the Persistent Volumes Claim name.
      name: data
      selector:
        # label is the volume label to bind (only limited to single label).
        label: ""
        # value is the volume label value to bind (only limited to single label).
        value: ""
      # size is the minimum size of the Persistent Volume.
      size: 5Gi
      # storageClassName is the name of the StorageClass to be used. Leave empty if you do not use a storage class.
      storageClassName: ""
    # enabled specifies whether persistent volumes for the pods are used.
    enabled: true
    # useDynamicProvisioning specifies whether StorageClasses are used to dynamically create persistent volumes for the pods.
    useDynamicProvisioning: true
    # extraVolumes provides a list of additional extra volumes.
    extraVolumes: []
      # - name: custom-volume-1
      #   configMap:
      #      name: custom-configMap
      #      defaultMode: 0755
      # - name: custom-volume-2
      #   secret:
      #     secretName: custom-secret
      #     defaultMode: 0744
      # - name: nfs-volume
      #   nfs:
      #     # URL for the NFS server
      #     server: <nfs_server> # Change this!
      #     path: /
    # extraVolumeMounts provides a list of additional extra volumes.
    extraVolumeMounts: []
      # - name: custom-volume-1
      #   mountPath: /custom/mount/path-1
      #   readOnly: false
      # - name: custom-volume-2
      #   mountPath: /custom/mount/path-2
      # - name: nfs-volume
      #   mountPath: /path/nfs
  # replicaCount specifies the number of replicas to deploy.
  replicaCount: 1
  resources:
    limits:
      # cpu is the maximum amount of cpu services can use.
      cpu: 4
      # memory is the maximum amount of memory services can use.
      memory: 16Gi
    requests:
      # cpu is the minimum amount of cpu services require to run.
      cpu: 1
      # memory is the minimum amount of memory services require to run.
      memory: 4Gi
